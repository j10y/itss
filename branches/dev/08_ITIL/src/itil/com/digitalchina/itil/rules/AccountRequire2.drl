/*
1.传入参数为一Map以适应后续的变化,因为解析过程也是动态的
2.Map中设定各种输入参数:
输出：
head[Map],头部输出
	cfx_CheckSum;
	cfx_PriceFileDate;
	cfx_ConfigIdentifer;
	cfx_DateTimeStamp;
	cfx_PropDocumentIdentifier;
	cfx_CFXML;
	totalListPrice;
	orderType
rows[List<OrderProductLine>],行集输出
输入：
applyType,申请类型
disc,折扣
listType[newbox,mes,isu,soft],列表类别
qty,数量                                                                                                     
time,时间标记,检查本规则对输入数据是否在有效
bmsn[String[]],
xmlPath,
outPath,
cfrPath
*/

#created on: Dec 2, 2008
package com.digitalchina.itil.rules

#list any import classes here.
import com.digitalchina.itil.workflow.rules.RequireProcessRuleHelper;
import org.dom4j.Node;
import org.jbpm.graph.node.TaskNode;

import java.io.File;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Date;
import com.digitalchina.itil.workflow.rules.RequireProcessRuleHelper;

import org.apache.commons.beanutils.BeanUtils;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Node;
import org.dom4j.io.SAXReader;

#declare any global variables here



function void accountStart(Map $map){
	
	String dataId = (String)$map.get("dataId");	
	String serviceItemId = (String)$map.get("serviceItemId");	
	String nodeId = (String)$map.get("nodeId");	
	String processId = (String)$map.get("processId");
	String nodeName = (String)$map.get("nodeName");	
	RequireProcessRuleHelper processRuleHelper=new RequireProcessRuleHelper();
	processRuleHelper.accountStart(dataId,serviceItemId ,nodeId,nodeName,processId);
	
}
function void accountAudit(Map $map){

	String dataId = (String)$map.get("dataId");	
	String serviceItemId = (String)$map.get("serviceItemId");
	String nodeId = (String)$map.get("nodeId");	
	String processId = (String)$map.get("processId");	
	String nodeName = (String)$map.get("nodeName");		
	String result = (String)$map.get("result");	
	String comment = (String)$map.get("comment");
	RequireProcessRuleHelper processRuleHelper=new RequireProcessRuleHelper();
	processRuleHelper.accountAudit(dataId,serviceItemId ,nodeId,nodeName,processId,result,comment);		
}
function void accountBack(Map $map){

	String dataId = (String)$map.get("dataId");	
	String serviceItemId = (String)$map.get("serviceItemId");	 	
	String nodeName = (String)$map.get("nodeName");	
	String nodeId = (String)$map.get("nodeId");	
	String processId = (String)$map.get("processId");
	String result = (String)$map.get("result");	
	String comment = (String)$map.get("comment");
	RequireProcessRuleHelper processRuleHelper=new RequireProcessRuleHelper();
	processRuleHelper.accountBack(dataId,serviceItemId ,nodeId,nodeName,processId,result,comment);
	
}
function void accountEnd(Map $map){
	
	String dataId = (String)$map.get("dataId");	
	String serviceItemId = (String)$map.get("serviceItemId");
	String nodeId = (String)$map.get("nodeId");	
	String processId = (String)$map.get("processId");
	String nodeName = (String)$map.get("nodeName");		
	RequireProcessRuleHelper processRuleHelper=new RequireProcessRuleHelper();
	processRuleHelper.accountEnd(dataId,serviceItemId ,nodeId,nodeName,processId);
	
}

//function String sbuSelect(Map $map){
	
	//String dataId = (String)$map.get("dataId");	
	//String serviceItemId = (String)$map.get("serviceItemId");
	//String nodeId = (String)$map.get("nodeId");	
	//String processId = (String)$map.get("processId");
	//String nodeName = (String)$map.get("nodeName");	
	//String result = (String)$map.get("result");	
	//String comment = (String)$map.get("comment");
	
	//RequireProcessRuleHelper processRuleHelper=new RequireProcessRuleHelper();
	//String trans = processRuleHelper.sbuSelect(dataId,serviceItemId ,nodeId,nodeName,processId,result,comment);
	//return trans;
	
//}

function String sbuSelect(Map $map){
	
	String dataId = (String)$map.get("dataId");	
	String serviceItemId = (String)$map.get("serviceItemId");
	String processName = (String)$map.get("processName");	
	RequireProcessRuleHelper processRuleHelper=new RequireProcessRuleHelper();
	String trans = processRuleHelper.sbuSelect(dataId,serviceItemId ,processName);
	return trans;
	
}

rule "accountStart"
	salience 1000 
	when
		$map: Map(
			this['ruleName'] =='accountStart'		
		)
	then
	accountStart($map);
	$map.put("transitionName","NOLEAVE");	
end

rule "accountAudit"
	salience 900 
	when
		$map: Map(
			this['ruleName'] =='accountAudit'		
		)
	then	
	accountAudit($map);
	$map.put("transitionName",$map.get("result"));	
end

rule "accountBack"
	salience 800 
	when
		$map: Map(
			this['ruleName'] =='accountBack'		
		)
	then
	accountBack($map);	
	$map.put("transitionName",$map.get("result"));		
end

rule "accountEnd"
	salience 800 
	when
		$map: Map(
			this['ruleName'] =='accountEnd'		
		)
	then	
	accountEnd($map);
	$map.put("transitionName","NOLEAVE");		
end

rule "sbuSelect"
	salience 700 
	when
		$map: Map(
			this['ruleName'] =='sbuSelect'		
		)
	then	
	$map.put("transitionName",sbuSelect($map));		
end

