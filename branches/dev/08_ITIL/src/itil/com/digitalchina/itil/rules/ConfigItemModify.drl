package com.digitalchina.itil.rules

#list any import classes here.
import com.digitalchina.itil.workflow.rules.ConfigRuleHelper;
import org.dom4j.Node;
import org.jbpm.graph.node.TaskNode;
import java.io.File;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Date;
import org.apache.commons.beanutils.BeanUtils;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Node;
import org.dom4j.io.SAXReader;

#declare any global variables here

function void modifyStartStatus(Map $map){
	String dataId = (String)$map.get("dataId");	
	String nodeId = (String)$map.get("nodeId");	
	String processId = (String)$map.get("processId");
	String nodeName = (String)$map.get("nodeName");		
	ConfigRuleHelper configRuleHelper=new ConfigRuleHelper();
	configRuleHelper.modifyStart(dataId,nodeId,nodeName,processId);
}

function String modifyConfirmByManagerAuditStatus(Map $map){
	String dataId = (String)$map.get("dataId");	
	String nodeId = (String)$map.get("nodeId");	
	String processId = (String)$map.get("processId");
	String nodeName = (String)$map.get("nodeName");		
	String result = (String)$map.get("result");	
	String comment = (String)$map.get("comment");
	ConfigRuleHelper configRuleHelper=new ConfigRuleHelper();
	String trans = configRuleHelper.modifyConfirmByManagerAudit(dataId,nodeId,nodeName,processId,result,comment);
	return trans;	
}

function String modifyConfirmByITAuditStatus(Map $map){
	String dataId = (String)$map.get("dataId");		
	String nodeName = (String)$map.get("nodeName");	
	String nodeId = (String)$map.get("nodeId");	
	String processId = (String)$map.get("processId");
	String result = (String)$map.get("result");	
	String comment = (String)$map.get("comment");
	ConfigRuleHelper configRuleHelper=new ConfigRuleHelper();
	String tran = configRuleHelper.modifyConfirmByITAudit(dataId,nodeId,nodeName,processId,result,comment);
	return tran;	
}

function String modifyConfirmUserStatus(Map $map){
	String dataId = (String)$map.get("dataId");		
	String nodeName = (String)$map.get("nodeName");	
	String nodeId = (String)$map.get("nodeId");	
	String processId = (String)$map.get("processId");
	String result = (String)$map.get("result");	
	String comment = (String)$map.get("comment");
	ConfigRuleHelper configRuleHelper=new ConfigRuleHelper();
	String tran = configRuleHelper.modifyConfirmUser(dataId,nodeId,nodeName,processId,result,comment);
	return tran;	
}

function String modifyBackStatus(Map $map){
	String dataId = (String)$map.get("dataId");		
	String nodeName = (String)$map.get("nodeName");	
	String nodeId = (String)$map.get("nodeId");	
	String processId = (String)$map.get("processId");
	String result = (String)$map.get("result");	
	String comment = (String)$map.get("comment");
	ConfigRuleHelper configRuleHelper=new ConfigRuleHelper();
	String tran = configRuleHelper.modifyBack(dataId,nodeId,nodeName,processId,result,comment);
	return tran;	
}

rule "modifyStartNode"
	salience 1000 
	when
		$map: Map(
			this['ruleName'] =='modifyStartNode'		
		)
	then	 	
	modifyStartStatus($map);
	$map.put("transitionName","NOLEAVE");	
end

rule "confirmByManagerAuditNode"
	salience 900 
	when
		$map: Map(
			this['ruleName'] =='confirmByManagerAuditNode'		
		)
	then	
	$map.put("transitionName",modifyConfirmByManagerAuditStatus($map));	
end

rule "modifyConfirmByITAuditNode"
	salience 800 
	when
		$map: Map(
			this['ruleName'] =='modifyConfirmByITAuditNode'		
		)
	then	
	$map.put("transitionName",modifyConfirmByITAuditStatus($map));		
end


rule "modifyConfirmUserNode"
	salience 800 
	when
		$map: Map(
			this['ruleName'] =='modifyConfirmUserNode'		
		)
	then	
	$map.put("transitionName",modifyConfirmUserStatus($map));		
end

rule "modifyBackNode"
	salience 800 
	when
		$map: Map(
			this['ruleName'] =='modifyBackNode'		
		)
	then	
	$map.put("transitionName",modifyBackStatus($map));		
end