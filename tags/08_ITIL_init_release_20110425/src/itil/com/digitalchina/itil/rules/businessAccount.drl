/*
1.传入参数为一Map以适应后续的变化,因为解析过程也是动态的
2.Map中设定各种输入参数:
输出：
head[Map],头部输出
	cfx_CheckSum;
	cfx_PriceFileDate;
	cfx_ConfigIdentifer;
	cfx_DateTimeStamp;
	cfx_PropDocumentIdentifier;
	cfx_CFXML;
	totalListPrice;
	orderType
rows[List<OrderProductLine>],行集输出
输入：
applyType,申请类型
disc,折扣
listType[newbox,mes,isu,soft],列表类别
qty,数量                                                                                                     
time,时间标记,检查本规则对输入数据是否在有效
bmsn[String[]],
xmlPath,
outPath,
cfrPath
*/

#created on: Dec 2, 2008
package com.digitalchina.itil.rules

#list any import classes here.
import com.digitalchina.itil.workflow.rules.BusinessAccountRuleHelper;
import org.dom4j.Node;
import org.jbpm.graph.node.TaskNode;

import java.io.File;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Date;

import org.apache.commons.beanutils.BeanUtils;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Node;
import org.dom4j.io.SAXReader;

#declare any global variables here

function void start(Map $map){
	
	String dataId = (String)$map.get("dataId");	
	String nodeId = (String)$map.get("nodeId");	
	String processId = (String)$map.get("processId");
	String nodeName = (String)$map.get("nodeName");	
	BusinessAccountRuleHelper baRuleHelper=new BusinessAccountRuleHelper();
	baRuleHelper.start(dataId,nodeId,nodeName,processId);
	
}
function void audit(Map $map){

	String dataId = (String)$map.get("dataId");	
	String nodeId = (String)$map.get("nodeId");	
	String processId = (String)$map.get("processId");
	String nodeName = (String)$map.get("nodeName");		
	String result = (String)$map.get("result");	
	String comment = (String)$map.get("comment");
	BusinessAccountRuleHelper baRuleHelper=new BusinessAccountRuleHelper();
	baRuleHelper.audit(dataId,nodeId,nodeName,processId,result,comment);
}

function void back(Map $map){

	String dataId = (String)$map.get("dataId");	 	
	String nodeName = (String)$map.get("nodeName");	
	String nodeId = (String)$map.get("nodeId");	
	String processId = (String)$map.get("processId");
	String result = (String)$map.get("result");	
	String comment = (String)$map.get("comment");
	BusinessAccountRuleHelper baRuleHelper=new BusinessAccountRuleHelper();
	baRuleHelper.back(dataId,nodeId,nodeName,processId);
	
}

function void endBa(Map $map){
	
	String dataId = (String)$map.get("dataId");	
	String nodeId = (String)$map.get("nodeId");	
	String processId = (String)$map.get("processId");
	String nodeName = (String)$map.get("nodeName");	
	BusinessAccountRuleHelper baRuleHelper=new BusinessAccountRuleHelper();
	baRuleHelper.end(dataId,nodeId,nodeName,processId);
	
}

rule "start"
	salience 1000 
	when
		$map: Map(
			this['ruleName'] =='start'		
		)
	then
	start($map);
	$map.put("transitionName","NOLEAVE");	
end

rule "audit"
	salience 900 
	when
		$map: Map(
			this['ruleName'] =='audit'		
		)
	then	
	audit($map);
	$map.put("transitionName",$map.get("result"));	
end

rule "back"
	salience 800 
	when
		$map: Map(
			this['ruleName'] =='back'		
		)
	then
	back($map);	
	$map.put("transitionName",$map.get("result"));		
end

rule "end"
	salience 800 
	when
		$map: Map(
			this['ruleName'] =='end'		
		)
	then
	endBa($map);	
	$map.put("transitionName","NOLEAVE");		
end
